name: Deploy Spring Boot (1Panel container)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出仓库
      - name: Checkout repo
        uses: actions/checkout@v5

      # 2. 设置 JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      # 3. 构建 backend 模块
      - name: Build with Maven
        run: |
          if [ -d backend ] && [ -f backend/pom.xml ]; then
            cd backend
            mvn clean package -DskipTests
          else
            echo "No backend directory or pom.xml found, skipping Maven build."
          fi

      # 4. 准备 SSH key
      - name: Prepare SSH key
        run: |
          echo "${{ secrets.SERVER_SSH_KEY }}" > ./deploy_key
          chmod 600 ./deploy_key
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # 验证SSH key文件存在且可读
          echo "Validating SSH key file..."
          if [ -f ./deploy_key ] && [ -r ./deploy_key ]; then
            echo "SSH key file is present and readable"
          else
            echo "SSH key file validation failed"
            exit 1
          fi

          # 添加主机到known_hosts
          ssh-keyscan -H "${{ secrets.SERVER_HOST }}" >> ~/.ssh/known_hosts 2>/dev/null || echo "Host key scan failed, continuing anyway"
          chmod 644 ~/.ssh/known_hosts

          echo "SSH key preparation completed"

      # 5. 测试 SSH 连接
      - name: Test SSH connection
        continue-on-error: true
        run: |
          echo "Testing SSH connection to ${{ secrets.SERVER_HOST }}..."
          ssh -i ./deploy_key \
              -o ConnectTimeout=10 \
              ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
              "echo 'SSH connection successful' && exit"
          echo "SSH connection test completed"

      # 6. 上传 JAR 到服务器
      - name: Upload jar to server
        continue-on-error: true
        run: |
          if [ -f backend/target/backend-0.0.1-SNAPSHOT.jar ]; then
            echo "JAR file found, preparing upload..."
            ls -la backend/target/backend-0.0.1-SNAPSHOT.jar

            echo "Creating remote directory..."
            ssh -i ./deploy_key \
                ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
                "mkdir -p /root/order-management-system/backend/"

            echo "Uploading JAR file..."
            scp -o ConnectTimeout=30 \
                -i ./deploy_key \
                backend/target/backend-0.0.1-SNAPSHOT.jar \
                ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/root/order-management-system/backend/
            echo "JAR file upload completed"
          else
            echo "JAR file not found, listing available files:"
            ls -la backend/target/ 2>/dev/null || echo "Backend target directory does not exist"
            echo "Skipping upload."
          fi

      # 7. 重启容器
      - name: Restart container
        continue-on-error: true
        run: |
          echo "Checking for order-backend container..."
          if ssh -i ./deploy_key \
             -o ConnectTimeout=10 \
             ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
             "docker ps -a --format '{{.Names}}' | grep -q '^order-backend$'"; then
            echo "Container found, restarting..."
            ssh -i ./deploy_key \
               -o ConnectTimeout=10 \
               ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
               "docker restart order-backend"
            echo "Container restart initiated"
          else
            echo "Container order-backend not found, listing available containers:"
            ssh -i ./deploy_key \
               -o ConnectTimeout=10 \
               ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
               "docker ps -a" || echo "Cannot list containers"
            echo "Skipping restart."
          fi